/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import DAO.Animal;
import DAO.Especie;
import DAO.EspecieDAO;
import DAO.IAnimalDAO;
import DAO.IEspecieDAO;
import DAO.IZoologicoDAO;
import DAO.Zoologico;
import DAO.ZoologicoDAO;
import DAO.animalDAO;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import validores.Validadores;

/**
 *
 * @author lv1822
 */
public class animales extends javax.swing.JFrame {
    DefaultTableModel modelo;
    
    
    private Validadores validadores = new Validadores();
    public IEspecieDAO especieDAO = new EspecieDAO();
    public IAnimalDAO animalDAO = new animalDAO();
    public IZoologicoDAO zoologicoDAO = new ZoologicoDAO();
    
    /**
     * Creates new form animales
     */
    public animales() {
        initComponents();
        modelo = new DefaultTableModel();
        modelo.addColumn("Id Animal");
        modelo.addColumn("Identificacion");
        modelo.addColumn("Sexo");
        modelo.addColumn("Año nacimiento");
        modelo.addColumn("id Especie");
        modelo.addColumn("id Zoologico");
        this.tblAnimales.setModel(modelo);
        consultarTodos();
        modelComboBoxEspecie();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtIdentificacion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtIdAnimal = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAnimales = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        cajaSexo = new javax.swing.JComboBox<>();
        btnCancelar2 = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        cajaEspecie = new javax.swing.JComboBox<>();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        cajaZoo = new javax.swing.JComboBox<>();
        btnBuscarPorId = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuOpcionesZoologico = new javax.swing.JMenu();
        menuItemEspecie = new javax.swing.JMenuItem();
        menuItemZoologico = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Animales");

        jLabel1.setText("ID Animal:");

        jLabel2.setText("Identificación:");

        jLabel5.setText("Especie");

        jLabel3.setText("Sexo:");

        jLabel4.setText("Año nacimiento:");

        tblAnimales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblAnimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAnimalesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAnimales);

        jLabel6.setText("zoologico");

        cajaSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--------", "Hembra", "Macho", " " }));

        btnCancelar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/Sign_Delete_Icon_32.png"))); // NOI18N
        btnCancelar2.setText("Cancelar");
        btnCancelar2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar2ActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/Floppy.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/folder_blue_parent.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/Delete.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEliminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscarPorId.setText("Buscar");
        btnBuscarPorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorIdActionPerformed(evt);
            }
        });

        menuOpcionesZoologico.setText("Opciones");

        menuItemEspecie.setText("Especie");
        menuItemEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEspecieActionPerformed(evt);
            }
        });
        menuOpcionesZoologico.add(menuItemEspecie);

        menuItemZoologico.setText("Zoologico");
        menuItemZoologico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemZoologicoActionPerformed(evt);
            }
        });
        menuOpcionesZoologico.add(menuItemZoologico);

        jMenuBar1.add(menuOpcionesZoologico);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel6))
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cajaSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cajaZoo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtIdentificacion)
                                .addComponent(cajaEspecie, 0, 186, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtIdAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscarPorId))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancelar2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtIdAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarPorId))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cajaEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cajaSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cajaZoo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCancelar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblAnimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAnimalesMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model= (DefaultTableModel) tblAnimales.getModel();
        String idAnimal=model.getValueAt(tblAnimales.getSelectedRow(), 0).toString();
        String identificacion=model.getValueAt(tblAnimales.getSelectedRow(), 1).toString();
        String sexo=model.getValueAt(tblAnimales.getSelectedRow(), 2).toString();
        String añoNa=model.getValueAt(tblAnimales.getSelectedRow(), 3).toString();
        String idEspecie=model.getValueAt(tblAnimales.getSelectedRow(), 4).toString();
        String idZoologico=model.getValueAt(tblAnimales.getSelectedRow(), 5).toString();
        txtIdAnimal.setText(idAnimal);
        txtIdentificacion.setText(identificacion);
        int añoNaI=Integer.parseInt(añoNa);
        jYearChooser1.setYear(añoNaI);
        if(sexo.equals("Hembra")){
            cajaSexo.setSelectedIndex(1);
        }
        else{
            cajaSexo.setSelectedIndex(2);
        }
        List<Especie> list=especieDAO.consultarTodos();
        for(int in=0; in<list.size();in++){
            String elementoE=list.get(in).toString();
            String idE= elementoE.substring(0, elementoE.indexOf(","));
            if(Integer.parseInt(idEspecie) == Integer.parseInt(idE)){
                cajaEspecie.setSelectedIndex(in+1);
            }
        }
        
        List<Zoologico> listZ = zoologicoDAO.consultarTodos();
        for(int i=0; i<listZ.size();i++){
            String elemento=listZ.get(i).toString();
            String idZ= elemento.substring(0, elemento.indexOf(","));
            if(Integer.parseInt(idZoologico) == Integer.parseInt(idZ)){
                cajaZoo.setSelectedIndex(i+1);
            }
        }
        
        
    }//GEN-LAST:event_tblAnimalesMouseClicked

    private void menuItemEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEspecieActionPerformed
        // TODO add your handling code here:
        especies ventanaE = new especies();
        ventanaE.setVisible(true);
        ventanaE.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_menuItemEspecieActionPerformed

    private void menuItemZoologicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemZoologicoActionPerformed
        // TODO add your handling code here:
        zoologicos ventanaZ=new zoologicos();
        ventanaZ.setVisible(true);
        ventanaZ.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_menuItemZoologicoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        if(validacion()){
            if(validacionLargo()){
                Animal animal= new Animal();
                if(validadores.validaEntero(txtIdAnimal.getText())){
                    animal.setId_animal(Integer.parseInt(txtIdAnimal.getText()));
                }
                else{
                    JOptionPane.showMessageDialog(null, "ID debe ser un número", "Animal", JOptionPane.INFORMATION_MESSAGE);
                }
                animal.setIdentificacion(txtIdentificacion.getText());
                animal.setSexo(cajaSexo.getSelectedItem().toString());
                
                if(jYearChooser1.getYear()<2022){
                    animal.setAño_nacimiento(jYearChooser1.getYear());
                }
                else{
                    JOptionPane.showMessageDialog(null, "Año mayor al que estamos", "Animal", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                String elemento=cajaEspecie.getSelectedItem().toString();
                String idE= elemento.substring(0, elemento.indexOf(","));
                animal.setEspecie(Integer.parseInt(idE));
                
                String zoo=cajaZoo.getSelectedItem().toString();
                String idZ= elemento.substring(0, zoo.indexOf(","));
                animal.setZoologico(Integer.parseInt(idZ));
                
                if(animalDAO.agregar(animal)){
                    JOptionPane.showMessageDialog(null, "Se Agrego con Exito", "Animal", JOptionPane.INFORMATION_MESSAGE);
                    limpiarTextbox();
                }else{
                    JOptionPane.showMessageDialog(null, "Fallo al guardar el animal", "Animal", JOptionPane.INFORMATION_MESSAGE);
                }
                consultarTodos();
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        if(validacion()){
            if(validacionLargo()){
                Animal animal= new Animal();
                if(validadores.validaEntero(txtIdAnimal.getText())){
                    animal.setId_animal(Integer.parseInt(txtIdAnimal.getText()));
                }
                else{
                    JOptionPane.showMessageDialog(null, "ID debe ser un número", "Animal", JOptionPane.INFORMATION_MESSAGE);
                }

                animal.setIdentificacion(txtIdentificacion.getText());
                animal.setSexo(cajaSexo.getSelectedItem().toString());
                
                if(jYearChooser1.getYear()<2022){
                    animal.setAño_nacimiento(jYearChooser1.getYear());
                }
                else{
                    JOptionPane.showMessageDialog(null, "Año mayor al que estamos", "Animal", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
                String elemento=cajaEspecie.getSelectedItem().toString();
                String idE= elemento.substring(0, elemento.indexOf(","));
                animal.setEspecie(Integer.parseInt(idE));
                
                String zoo=cajaZoo.getSelectedItem().toString();
                String idZ= elemento.substring(0, zoo.indexOf(","));
                animal.setZoologico(Integer.parseInt(idZ));

                if(animalDAO.actualizar(animal)){
                    JOptionPane.showMessageDialog(null, "Se Actualizo con Exito", "Animal", JOptionPane.INFORMATION_MESSAGE);
                    limpiarTextbox();
                }else{
                    JOptionPane.showMessageDialog(null, "Fallo al actualizar Animal", "Animal", JOptionPane.INFORMATION_MESSAGE);
                }
                consultarTodos();
            }
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        if(txtIdAnimal.getText().length()<=0){
            String idS=JOptionPane.showInputDialog(null, "ID del animal que se va a eliminar");
            if(idS!=null){
                int idL=Integer.parseInt(idS);
                animalDAO.eliminar(idL);
                consultarTodos();
            }
        }
        else{
            String idS=txtIdAnimal.getText();
            if(idS!=null){
                int idL=Integer.parseInt(idS);
                animalDAO.eliminar(idL);
                limpiarTextbox();
                consultarTodos();
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarPorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorIdActionPerformed
        String idS;
        if(txtIdAnimal.getText().length()==0){
            idS=JOptionPane.showInputDialog(null, "ID del animal que se va a buscar");
        }
        else{
            idS=txtIdAnimal.getText();
        }
        List<Animal> list=animalDAO.consultar(Integer.parseInt(idS));
        DefaultTableModel model= (DefaultTableModel) tblAnimales.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        Object rowData[]=new Object[6];
        for(int i=0; i<list.size();i++){
            rowData[0]=list.get(i).getId_animal();
            rowData[1]=list.get(i).getIdentificacion();
            rowData[2]=list.get(i).getSexo();
            rowData[3]=list.get(i).getAño_nacimiento();
            rowData[4]=list.get(i).getEspecie();
            rowData[5]=list.get(i).getZoologico();
        
            model.addRow(rowData);
        }
        JOptionPane.showMessageDialog(null, "Busqueda completada", "Animales", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_btnBuscarPorIdActionPerformed

    private void btnCancelar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar2ActionPerformed
        // TODO add your handling code here:
        limpiarTextbox();
        consultarTodos();
    }//GEN-LAST:event_btnCancelar2ActionPerformed

/**
 *
 * Metodo para mostrar todas los animales registrados
 */
    public void consultarTodos(){
        List<Animal> list=animalDAO.consultarTodos();
        DefaultTableModel model= (DefaultTableModel) tblAnimales.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
          model.removeRow(i);
        }
        Object rowData[]=new Object[6];
        for(int i=0; i<list.size();i++){
            rowData[0]=list.get(i).getId_animal();
            rowData[1]=list.get(i).getIdentificacion();
            rowData[2]=list.get(i).getSexo();
            rowData[3]=list.get(i).getAño_nacimiento();
            rowData[4]=list.get(i).getEspecie();
            rowData[5]=list.get(i).getZoologico();
            
            model.addRow(rowData);
        }
    }
    
/**
 *
 * Modelo para el combobox de especie
 */
    public void modelComboBoxEspecie(){
        List<Especie> list=especieDAO.consultarTodos();
        DefaultComboBoxModel modeloC = new DefaultComboBoxModel();
        Especie especieN = new Especie();
        modeloC.addElement(especieN);

        for(int i=0; i<list.size();i++){
            modeloC.addElement(list.get(i));
        }
        cajaEspecie.setModel(modeloC);
        
        List<Zoologico> listZ = zoologicoDAO.consultarTodos();
        DefaultComboBoxModel modeloZ = new DefaultComboBoxModel();
        Zoologico zoologicoN = new Zoologico();
        modeloZ.addElement(zoologicoN);

        for(int i=0; i<listZ.size();i++){
            modeloZ.addElement(listZ.get(i));
        }
        cajaZoo.setModel(modeloZ);
    }
    
/**
 *
 * Metodo para limpiar todos los campos de texto
 */
    public void limpiarTextbox(){
        txtIdAnimal.setText("");
        txtIdentificacion.setText("");
        jYearChooser1.setYear(2022);
        cajaSexo.setSelectedIndex(0);
        cajaEspecie.setSelectedIndex(0);
        cajaZoo.setSelectedIndex(0);
        
    }

/**
 *
 * Metodo para validar que esta vacio algún campo de texto
 */
    public boolean validacion(){
        if((txtIdAnimal.getText().length() == 0)||(txtIdentificacion.getText().length() == 0)||(cajaSexo.getSelectedIndex() == 0)||
                (cajaEspecie.getSelectedIndex() == 0)){
            JOptionPane.showMessageDialog(null, "Campos sin llenar", "Animal", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        else{
            return true;
        }
    }
    
/**
 *
 * Metodo para validar que el campo no esté muy largo
 */
    public boolean validacionLargo(){
        if((txtIdAnimal.getText().length() <= 11)||(txtIdentificacion.getText().length()<=20)){
            return true;
        }
        else{
            JOptionPane.showMessageDialog(null, "Campos con infromacion muy larga", "Animal", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPorId;
    private javax.swing.JButton btnCancelar2;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cajaEspecie;
    private javax.swing.JComboBox<String> cajaSexo;
    private javax.swing.JComboBox<String> cajaZoo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JMenuItem menuItemEspecie;
    private javax.swing.JMenuItem menuItemZoologico;
    private javax.swing.JMenu menuOpcionesZoologico;
    private javax.swing.JTable tblAnimales;
    private javax.swing.JTextField txtIdAnimal;
    private javax.swing.JTextField txtIdentificacion;
    // End of variables declaration//GEN-END:variables
}
